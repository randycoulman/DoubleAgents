<?xml version="1.0"?><st-source><!-- Name: DoubleAgents-TestsNotice: The MIT LicenseCopyright (c) 2013 , Randy CoulmanPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.Comment: DoubleAgents is licensed under the MIT license.  See the copyright tabin the RB, the 'notice' property of this package, or the License.txtfile on GitHub.This package contains the unit tests for DoubleAgents.  See that package'scomment for more information.DbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1487DbUsername: randyDbVersion: 8DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'SUnitToo' '') #(#any 'DoubleAgents' ''))PackageName: DoubleAgents-TestsParcel: #('DoubleAgents-Tests')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'SUnitToo' #componentType #package) #(#name 'DoubleAgents' #componentType #package))PrerequisiteParcels: #(#('Base VisualWorks' '') #('SUnitToo' '') #('DoubleAgents' ''))PrintStringCache: (8,randy)Version: 8Date: 2:01:45 PM April 26, 2013 --><time-stamp>From VisualWorksÂ® Personal Use Edition, 7.9.1 of October 18, 2012 on April 26, 2013 at 2:01:45 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>StubTest</name><environment>DoubleAgents</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DoubleAgents-Tests</package></attributes></class><class><name>FakeAgent</name><environment>DoubleAgents</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>verified failVerification tornDown failTearDown </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DoubleAgents-Tests</package></attributes></class><class><name>InPlaceInstanceDoubleTest</name><environment>DoubleAgents</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DoubleAgents-Tests</package></attributes></class><class><name>FakeAgentTest</name><environment>DoubleAgents</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DoubleAgents-Tests</package></attributes></class><class><name>StandaloneDoubleTest</name><environment>DoubleAgents</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DoubleAgents-Tests</package></attributes></class><class><name>InPlaceClassDoubleTest</name><environment>DoubleAgents</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DoubleAgents-Tests</package></attributes></class><class><name>FlexibleStubTest</name><environment>DoubleAgents</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>agent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DoubleAgents-Tests</package></attributes></class><class><name>Target</name><environment>DoubleAgents</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DoubleAgents-Tests</package></attributes></class><class><name>MockTest</name><environment>DoubleAgents</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DoubleAgents-Tests</package></attributes></class><class><name>AgencyTest</name><environment>DoubleAgents</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DoubleAgents-Tests</package></attributes></class><class><name>MockStubInteractionTest</name><environment>DoubleAgents</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DoubleAgents-Tests</package></attributes></class><class><name>FlexibleMockTest</name><environment>DoubleAgents</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>agent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DoubleAgents-Tests</package></attributes></class><methods><class-id>DoubleAgents.StubTest</class-id> <category>initialize-release</category><body package="DoubleAgents-Tests">setUp	Agency forceReset</body><body package="DoubleAgents-Tests">tearDown	Agency forceReset</body></methods><methods><class-id>DoubleAgents.FakeAgent</class-id> <category>initialize-release</category><body package="DoubleAgents-Tests">failTearDown	failTearDown := true</body><body package="DoubleAgents-Tests">failVerification	failVerification := true</body><body package="DoubleAgents-Tests">initialize	super initialize.	verified := false.	tornDown := false.	failVerification := false.	failTearDown := false</body></methods><methods><class-id>DoubleAgents.FakeAgent</class-id> <category>testing</category><body package="DoubleAgents-Tests">wasTornDown	^tornDown</body><body package="DoubleAgents-Tests">wasVerified	^verified</body></methods><methods><class-id>DoubleAgents.FakeAgent</class-id> <category>actions</category><body package="DoubleAgents-Tests">_tearDown	failTearDown ifTrue: [^self error: 'Fail during tearDown'].	tornDown := true</body><body package="DoubleAgents-Tests">_verify	failVerification ifTrue: [^BurnNotice raise].	verified := true</body></methods><methods><class-id>DoubleAgents.FakeAgent class</class-id> <category>instance creation</category><body package="DoubleAgents-Tests">new	^super new initialize</body><body package="DoubleAgents-Tests">thatFailsTearDown	^self new failTearDown</body><body package="DoubleAgents-Tests">thatFailsVerification	^self new failVerification</body></methods><methods><class-id>DoubleAgents.InPlaceInstanceDoubleTest</class-id> <category>initialize-release</category><body package="DoubleAgents-Tests">setUp	Agency forceReset</body><body package="DoubleAgents-Tests">tearDown	Agency forceReset</body></methods><methods><class-id>DoubleAgents.StandaloneDoubleTest</class-id> <category>initialize-release</category><body package="DoubleAgents-Tests">setUp	Agency forceReset</body><body package="DoubleAgents-Tests">tearDown	Agency forceReset</body></methods><methods><class-id>DoubleAgents.InPlaceClassDoubleTest</class-id> <category>initialize-release</category><body package="DoubleAgents-Tests">setUp	Agency forceReset</body><body package="DoubleAgents-Tests">tearDown	Agency forceReset</body></methods><methods><class-id>DoubleAgents.FlexibleStubTest</class-id> <category>initialize-release</category><body package="DoubleAgents-Tests">setUp	Agency forceReset.	agent := (Target stub: #unaryMessage return: 42)				flexible;				yourself</body><body package="DoubleAgents-Tests">tearDown	Agency forceReset</body></methods><methods><class-id>DoubleAgents.Target</class-id> <category>accessing</category><body package="DoubleAgents-Tests">+ anObject	^#original</body><body package="DoubleAgents-Tests">keyword: arg1 message: arg2	^#original</body><body package="DoubleAgents-Tests">unaryMessage	^#original</body></methods><methods><class-id>DoubleAgents.Target class</class-id> <category>accessing</category><body package="DoubleAgents-Tests">unaryClassMessage	^#original</body></methods><methods><class-id>DoubleAgents.MockTest</class-id> <category>initialize-release</category><body package="DoubleAgents-Tests">setUp	Agency forceReset</body><body package="DoubleAgents-Tests">tearDown	Agency forceReset</body></methods><methods><class-id>DoubleAgents.AgencyTest</class-id> <category>initialize-release</category><body package="DoubleAgents-Tests">setUp	Agency forceReset</body><body package="DoubleAgents-Tests">tearDown	Agency forceReset</body></methods><methods><class-id>DoubleAgents.MockStubInteractionTest</class-id> <category>initialize-release</category><body package="DoubleAgents-Tests">setUp	Agency forceReset</body><body package="DoubleAgents-Tests">tearDown	Agency forceReset</body></methods><methods><class-id>DoubleAgents.FlexibleMockTest</class-id> <category>initialize-release</category><body package="DoubleAgents-Tests">setUp	Agency forceReset.	agent := (Target expect: #unaryMessage return: 42)				flexible;				yourself</body><body package="DoubleAgents-Tests">tearDown	Agency forceReset</body></methods><methods><class-id>DoubleAgents.StubTest</class-id> <category>tests</category><body package="DoubleAgents-Tests">canIgnoreMessageArguments	&lt;test&gt;	| agent |	agent := Target stub: #keyword:message: return: #aValue.	self assert: (agent keyword: #arg message: 42) == #aValue</body><body package="DoubleAgents-Tests">cannotStubUnknownMessage	&lt;test&gt;	self should: [Target stub: #unknownMessage] raise: MessageNotUnderstood</body><body package="DoubleAgents-Tests">respondsToStubbedMessages	&lt;test&gt;	| agent |	agent := Target stub: #unaryMessage.	self assert: (agent respondsTo: #unaryMessage)</body><body package="DoubleAgents-Tests">stubsABinaryMessage	&lt;test&gt;	| agent |	agent := Target stub: #+ do: [:arg | arg + 100].	self assert: agent + 42 = 142</body><body package="DoubleAgents-Tests">stubsAKeywordMessage	&lt;test&gt;	| agent |	agent := Target stub: #keyword:message:				do: [:arg1 :arg2 | Array with: arg1 with: arg2].	self assert: (agent keyword: #arg message: 42) = #(#arg 42)</body><body package="DoubleAgents-Tests">stubsAUnaryMessage	&lt;test&gt;	| agent |	agent := Target stub: #unaryMessage.	self shouldnt: [agent unaryMessage] raise: MessageNotUnderstood</body><body package="DoubleAgents-Tests">stubsAlwaysVerify	&lt;test&gt;	self shouldnt: [(Target stub: #unaryMessage) _verify]		raise: BurnNotice</body><body package="DoubleAgents-Tests">stubsMultipleMessages	&lt;test&gt;	| agent |	agent := (Target doubleAgent)				stub: #unaryMessage return: #unary;				stub: #+ return: #binary;				stub: #keyword:message: return: #keyword;				yourself.	self		assert: agent unaryMessage == #unary description: 'unary send failed';		assert: agent + 42 == #binary description: 'binary send failed';		assert: (agent keyword: #arg message: 42) == #keyword			description: 'keyword send failed'</body><body package="DoubleAgents-Tests">stubsWithDefaultReturnValue	&lt;test&gt;	| agent |	agent := Target stub: #unaryMessage.	self assert: agent unaryMessage == agent</body><body package="DoubleAgents-Tests">stubsWithReturnBlock	&lt;test&gt;	| agent returnValues |	returnValues := #(42 58) readStream.	agent := Target stub: #unaryMessage do: [returnValues next].	self		assert: agent unaryMessage = 42;		assert: agent unaryMessage = 58</body><body package="DoubleAgents-Tests">stubsWithSpecifiedReturnValue	&lt;test&gt;	| agent returnValue |	returnValue := Object new.	agent := Target stub: #unaryMessage return: returnValue.	self assert: agent unaryMessage == returnValue</body></methods><methods><class-id>DoubleAgents.InPlaceInstanceDoubleTest</class-id> <category>tests</category><body package="DoubleAgents-Tests">canBeCreatedExplicitly	&lt;test&gt;	| agent target |	target := Target new.	agent := DoubleAgent around: target.	self assert: agent _target == target</body><body package="DoubleAgents-Tests">canBeCreatedFromTargetInstance	&lt;test&gt;	| agent target |	target := Target new.	agent := target doubleAgent.	self assert: agent _target == target</body><body package="DoubleAgents-Tests">cannotStubUnknownMessage	&lt;test&gt;	self should: [Target new stub: #unknownMessage] raise: MessageNotUnderstood</body><body package="DoubleAgents-Tests">handlesMultipleStubsOnSameInstance	&lt;test&gt;	| target |	target := Target new.	target		stub: #unaryMessage return: 42;		stub: #+ do: [:arg | arg + 100].	self assert: target + target unaryMessage = 142</body><body package="DoubleAgents-Tests">mocksAUnaryMessage	&lt;test&gt;	| target |	target := Target new.	target expect: #unaryMessage.	target unaryMessage.	self shouldnt: [Agency tearDown] raise: BurnNotice</body><body package="DoubleAgents-Tests">mocksOnlyAffectOneInstance	&lt;test&gt;	| target otherTarget |	target := Target new.	otherTarget := Target new.	target expect: #unaryMessage return: 42.	self assert: otherTarget unaryMessage == #original.	self should: [Agency tearDown] raise: BurnNotice</body><body package="DoubleAgents-Tests">restoresOriginalBehaviorOnTeardown	&lt;test&gt;	| target |	target := Target new.	target stub: #unaryMessage return: 42.	Agency forceReset.	self assert: target unaryMessage == #original</body><body package="DoubleAgents-Tests">returnsInstanceAsDefaultReturnValue	&lt;test&gt;	| target |	target := Target new.	target stub: #unaryMessage.	self assert: target unaryMessage == target</body><body package="DoubleAgents-Tests">stubsABinaryMessage	&lt;test&gt;	| target |	target := Target new.	target stub: #+ do: [:arg | arg + 100].	self assert: target + 42 = 142</body><body package="DoubleAgents-Tests">stubsAKeywordMessage	&lt;test&gt;	| target |	target := Target new.	target stub: #keyword:message:		do: [:arg1 :arg2 | Array with: arg1 with: arg2].	self assert: (target keyword: #arg message: 42) = #(#arg 42)</body><body package="DoubleAgents-Tests">stubsAUnaryMessage	&lt;test&gt;	| target |	target := Target new.	target stub: #unaryMessage return: 42.	self assert: target unaryMessage = 42</body><body package="DoubleAgents-Tests">stubsOnlyAffectOneInstance	&lt;test&gt;	| target otherTarget |	target := Target new.	otherTarget := Target new.	target stub: #unaryMessage return: 42.	self assert: otherTarget unaryMessage == #original</body><body package="DoubleAgents-Tests">usesExistingAgent	&lt;test&gt;	| target |	target := Target new.	self assert: (DoubleAgent around: target)				== (DoubleAgent around: target)</body><body package="DoubleAgents-Tests">usesExistingImplementationForUndoubledMethods	&lt;test&gt;	| target |	target := Target new.	target stub: #+ return: 42.	self assert: target unaryMessage == #original</body></methods><methods><class-id>DoubleAgents.FakeAgentTest</class-id> <category>tests</category><body package="DoubleAgents-Tests">matchesLifecycleAPIOfDoubleAgent	&lt;test&gt;	#(#_verify #_tearDown) do: 			[:each |			self				assert: (FakeAgent canUnderstand: each)					description: 'FakeAgent does not implement ' , each printString;				assert: (DoubleAgent canUnderstand: each)					description: 'DoubleAgent does not implement ' , each printString]</body></methods><methods><class-id>DoubleAgents.StandaloneDoubleTest</class-id> <category>tests</category><body package="DoubleAgents-Tests">canBeCreatedExplicitly	&lt;test&gt;	| agent |	agent := DoubleAgent of: Target.	self assert: agent _target == Target</body><body package="DoubleAgents-Tests">canBeCreatedFromTargetClass	&lt;test&gt;	| agent |	agent := Target doubleAgent.	self assert: agent _target == Target</body><body package="DoubleAgents-Tests">doesntInheritFromObject	&lt;test&gt;	self deny: (Target doubleAgent respondsTo: #size)</body><body package="DoubleAgents-Tests">doesntRespondToUnknownMessages	&lt;test&gt;	self deny: (Target doubleAgent respondsTo: #unknownMessage)</body><body package="DoubleAgents-Tests">doesntUnderstandUnknownMessages	&lt;test&gt;	self should: [Target doubleAgent unknownMessage]		raise: MessageNotUnderstood</body></methods><methods><class-id>DoubleAgents.InPlaceClassDoubleTest</class-id> <category>tests</category><body package="DoubleAgents-Tests">canBeCreatedExplicitly	&lt;test&gt;	| agent |	agent := DoubleAgent around: Target.	self assert: agent _target == Target</body><body package="DoubleAgents-Tests">canBeCreatedFromTargetInstance	&lt;test&gt;	| agent |	agent := Target classSideDouble.	self assert: agent _target == Target</body><body package="DoubleAgents-Tests">cannotStubUnknownMessage	&lt;test&gt;	self should: [Target classSideDouble stub: #unknownMessage]		raise: MessageNotUnderstood</body><body package="DoubleAgents-Tests">mocksNew	&lt;test&gt;	Target classSideDouble expect: #new.	Target new.	self shouldnt: [Agency tearDown] raise: BurnNotice</body><body package="DoubleAgents-Tests">restoresOriginalBehaviorAfterStubbingMoreThanOnce	&lt;test&gt;	(Target classSideDouble)		stub: #new return: #first;		stub: #new return: #second.	Agency forceReset.	self assert: (Target new isKindOf: Target)</body><body package="DoubleAgents-Tests">restoresOriginalBehaviorOnTeardown	&lt;test&gt;	Target classSideDouble stub: #new return: #newValue.	Agency forceReset.	self assert: (Target new isKindOf: Target)</body><body package="DoubleAgents-Tests">returnsClassAsDefaultReturnValue	&lt;test&gt;	Target classSideDouble stub: #unaryClassMessage.	self assert: Target unaryClassMessage == Target</body><body package="DoubleAgents-Tests">stubsNew	&lt;test&gt;	Target classSideDouble stub: #new return: #pwned.	self assert: Target new == #pwned</body><body package="DoubleAgents-Tests">usesExistingAgent	&lt;test&gt;	self assert: (DoubleAgent around: Target) == (DoubleAgent around: Target)</body><body package="DoubleAgents-Tests">usesExistingImplementationForUndoubledMethods	&lt;test&gt;	Target classSideDouble stub: #new return: 42.	self assert: Target unaryClassMessage == #original</body></methods><methods><class-id>DoubleAgents.FlexibleStubTest</class-id> <category>tests</category><body package="DoubleAgents-Tests">callsStubbedMethod	&lt;test&gt;	self assert: agent unaryMessage = 42</body><body package="DoubleAgents-Tests">doesntRespondToUnknownMessages	&lt;test&gt;	self deny: (agent respondsTo: #unknownMessage)</body><body package="DoubleAgents-Tests">doesntUnderstandUnknownMessages	&lt;test&gt;	self should: [agent unknownMessage] raise: MessageNotUnderstood</body><body package="DoubleAgents-Tests">respondsToKnownButUnstubbedMessages	&lt;test&gt;	self assert: (agent respondsTo: #keyword:message:)</body><body package="DoubleAgents-Tests">returnsSelfFromKnownButUnstubbedMessages	&lt;test&gt;	self assert: (agent keyword: #arg message: 42) == agent</body></methods><methods><class-id>DoubleAgents.MockTest</class-id> <category>tests</category><body package="DoubleAgents-Tests">canEnforceMessageSendOrdering	&lt;test&gt;	| agent |	agent := (Target doubleAgent)				ordered;				expect: #+ with: 42;				expect: #unaryMessage;				yourself.	self should: [agent unaryMessage] raise: BurnNotice</body><body package="DoubleAgents-Tests">canExpectTheSameMessageMultipleTimes	&lt;test&gt;	| agent |	agent := (Target doubleAgent)				expect: #unaryMessage return: 42;				expect: #unaryMessage return: 58;				yourself.	self		assert: agent unaryMessage = 42;		assert: agent unaryMessage = 58.	self shouldnt: [agent _verify] raise: BurnNotice</body><body package="DoubleAgents-Tests">canIgnoreMessageArguments	&lt;test&gt;	| agent |	agent := Target expect: #keyword:message: return: #aValue.	agent keyword: #arg message: 42.	self shouldnt: [agent _verify] raise: BurnNotice</body><body package="DoubleAgents-Tests">cannotMockUnknownMessage	&lt;test&gt;	self should: [Target expect: #unknownMessage] raise: MessageNotUnderstood</body><body package="DoubleAgents-Tests">failsIfArgumentConditionNotMet	&lt;test&gt;	| agent |	agent := Target expect: #keyword:message:				where: [:arg1 :arg2 | arg1 isString and: [arg2 = 42]].	self should: 			[agent				keyword: #('not a string') message: 42;				_verify]		raise: BurnNotice</body><body package="DoubleAgents-Tests">failsIfBinaryMessageSentWithUnexpectedArgument	&lt;test&gt;	| agent |	agent := Target expect: #+ with: 42.	self should: [agent + #not42] raise: BurnNotice</body><body package="DoubleAgents-Tests">failsIfExpectedMessageNotSent	&lt;test&gt;	| agent |	agent := Target expect: #unaryMessage.	self should: [agent _verify] raise: BurnNotice</body><body package="DoubleAgents-Tests">failsIfExpectedMessageSentTwice	&lt;test&gt;	| agent |	agent := Target expect: #unaryMessage.	agent unaryMessage.	self should: [agent unaryMessage] raise: BurnNotice</body><body package="DoubleAgents-Tests">failsIfKeywordMessageSentWithUnexpectedArgument	&lt;test&gt;	| agent |	agent := Target expect: #keyword:message: with: #arg with: 42.	self should: [agent keyword: #arg message: #not42]		raise: BurnNotice</body><body package="DoubleAgents-Tests">failsIfOneOfManyExpectationsFails	&lt;test&gt;	| agent |	agent := (Target doubleAgent)				expect: #unaryMessage;				expect: #+ with: 42;				expect: #keyword:message: with: #arg with: 142;				yourself.	self should: 			[agent unaryMessage.			agent keyword: #arg message: 142.			agent _verify]		raise: BurnNotice</body><body package="DoubleAgents-Tests">ignoresOrderingOfActualSends	&lt;test&gt;	| agent |	agent := (Target doubleAgent)				expect: #+ with: 42;				expect: #+ with: 58;				yourself.	agent + 58.	agent + 42.	self shouldnt: [agent _verify] raise: BurnNotice</body><body package="DoubleAgents-Tests">mocksABinaryMessage	&lt;test&gt;	| agent |	agent := Target expect: #+ with: 42.	self shouldnt: 			[agent				+ 42;				_verify]		raise: BurnNotice</body><body package="DoubleAgents-Tests">mocksAKeywordMessage	&lt;test&gt;	| agent |	agent := Target expect: #keyword:message: with: #arg with: 42.	self shouldnt: 			[agent				keyword: #arg message: 42;				_verify]		raise: BurnNotice</body><body package="DoubleAgents-Tests">mocksAUnaryMessage	&lt;test&gt;	| agent |	agent := Target expect: #unaryMessage.	agent unaryMessage.	self shouldnt: [agent _verify] raise: BurnNotice</body><body package="DoubleAgents-Tests">mocksMultipleMessages	&lt;test&gt;	| agent |	agent := (Target doubleAgent)				expect: #unaryMessage;				expect: #+ with: 42;				expect: #keyword:message: with: #arg with: 142;				yourself.	self shouldnt: 			[agent unaryMessage.			agent + 42.			agent keyword: #arg message: 142.			agent _verify]		raise: BurnNotice</body><body package="DoubleAgents-Tests">mocksWithArgumentCondition	&lt;test&gt;	| agent |	agent := Target expect: #keyword:message:				where: [:arg1 :arg2 | arg1 isString and: [arg2 = 42]].	self shouldnt: 			[agent				keyword: 'a String' message: 42;				_verify]		raise: BurnNotice</body><body package="DoubleAgents-Tests">mocksWithArgumentsAndReturnValue	&lt;test&gt;	| agent |	agent := Target				expect: #keyword:message:				with: #arg				with: 42				do: [:arg1 :arg2 | Array with: arg1 with: arg2].	self assert: (agent keyword: #arg message: 42) = #(#arg 42)</body><body package="DoubleAgents-Tests">mocksWithDefaultReturnValue	&lt;test&gt;	| agent |	agent := Target expect: #unaryMessage.	self assert: agent unaryMessage == agent</body><body package="DoubleAgents-Tests">mocksWithReturnBlock	&lt;test&gt;	| agent returnValues |	returnValues := #(42 58) readStream.	agent := Target expect: #unaryMessage do: [returnValues next].	self assert: agent unaryMessage = 42</body><body package="DoubleAgents-Tests">mocksWithSpecifiedReturnValue	&lt;test&gt;	| agent returnValue |	returnValue := Object new.	agent := Target expect: #unaryMessage return: returnValue.	self assert: agent unaryMessage == returnValue</body><body package="DoubleAgents-Tests">respondsToMockedMessages	&lt;test&gt;	| agent |	agent := Target expect: #unaryMessage.	self assert: (agent respondsTo: #unaryMessage)</body></methods><methods><class-id>DoubleAgents.AgencyTest</class-id> <category>tests</category><body package="DoubleAgents-Tests">automaticallyRegistersAgents	&lt;test&gt;	| agent |	agent := Target doubleAgent.	self assert: (Agency includes: agent)</body><body package="DoubleAgents-Tests">failsSetUpIfNotPreviouslyTornDown	&lt;test&gt;	Agency register: FakeAgent new.	self should: [Agency setUp] raise: BurnNotice</body><body package="DoubleAgents-Tests">isASingleton	&lt;test&gt;	self assert: Agency current == Agency current</body><body package="DoubleAgents-Tests">reportsTearDownErrors	&lt;test&gt;	Agency register: FakeAgent thatFailsTearDown.	self should: [Agency tearDown] raise: Error</body><body package="DoubleAgents-Tests">reportsVerificationFailures	&lt;test&gt;	Agency register: FakeAgent thatFailsVerification.	self should: [Agency tearDown] raise: BurnNotice</body><body package="DoubleAgents-Tests">resetsAfterVerifyBlock	&lt;test&gt;	| captured |	captured := nil.	Agency verifyAfter: [captured := Agency current].	self deny: Agency current == captured</body><body package="DoubleAgents-Tests">resetsCurrentEvenIfTearDownFails	&lt;test&gt;	| original |	original := Agency current.	Agency register: FakeAgent thatFailsTearDown.	[Agency tearDown] on: Error do: [:ex | ].	self deny: Agency current == original</body><body package="DoubleAgents-Tests">resetsCurrentEvenIfVerificationFails	&lt;test&gt;	| original |	original := Agency current.	Agency register: FakeAgent thatFailsVerification.	[Agency tearDown] on: BurnNotice do: [:ex | ].	self deny: Agency current == original</body><body package="DoubleAgents-Tests">resetsCurrentOnTeardown	&lt;test&gt;	| original |	original := Agency current.	Agency tearDown.	self deny: Agency current == original</body><body package="DoubleAgents-Tests">resetsCurrentWithoutVerifyingOnForcedReset	&lt;test&gt;	Agency register: FakeAgent thatFailsVerification.	self shouldnt: [Agency forceReset] raise: BurnNotice</body><body package="DoubleAgents-Tests">setsUpCleanlyIfCurrentAgencyHasNoAgents	&lt;test&gt;	Agency forceReset.	Agency current.	self shouldnt: [Agency setUp] raise: BurnNotice</body><body package="DoubleAgents-Tests">setsUpCleanlyIfNoCurrentAgency	&lt;test&gt;	Agency forceReset.	self shouldnt: [Agency setUp] raise: BurnNotice</body><body package="DoubleAgents-Tests">stopsVerifyingAfterFirstFailure	&lt;test&gt;	| agent failingAgent |	failingAgent := FakeAgent thatFailsVerification.	agent := FakeAgent new.	Agency		register: failingAgent;		register: agent.	self should: [Agency tearDown] raise: BurnNotice.	self deny: agent wasVerified</body><body package="DoubleAgents-Tests">supportsVerifyBlockShorthand	&lt;test&gt;	| agent |	agent := FakeAgent new.	[Agency register: agent] verifyAgents.	self assert: agent wasVerified</body><body package="DoubleAgents-Tests">tearsDownAgents	&lt;test&gt;	| agent |	agent := FakeAgent new.	Agency		register: agent;		forceReset.	self assert: agent wasTornDown</body><body package="DoubleAgents-Tests">tearsDownRemainingAgentsAfterError	&lt;test&gt;	| agent failing |	failing := FakeAgent thatFailsTearDown.	agent := FakeAgent new.	Agency		register: failing;		register: agent.	[Agency forceReset] on: Error do: [:ex | ].	self assert: agent wasTornDown</body><body package="DoubleAgents-Tests">verifiesAgentsAfterVerifyBlock	&lt;test&gt;	| agent |	agent := FakeAgent new.	Agency verifyAfter: [Agency register: agent].	self assert: agent wasVerified</body><body package="DoubleAgents-Tests">verifiesAgentsAtTeardown	&lt;test&gt;	| agent |	agent := FakeAgent new.	Agency		register: agent;		tearDown.	self assert: agent wasVerified</body></methods><methods><class-id>DoubleAgents.MockStubInteractionTest</class-id> <category>tests</category><body package="DoubleAgents-Tests">allowsStubOfSameMethodBetweenOrderedMocks	&lt;test&gt;	| agent |	agent := (Target doubleAgent)				ordered;				stub: #+ do: [:argument | 100 + argument];				expect: #+ with: 42 return: 42;				expect: #+ with: 58 return: 58;				yourself.	self		assert: agent + 23 = 123 description: 'stub before mocks';		assert: agent + 42 = 42 description: 'first mock';		assert: agent + 34 = 134 description: 'stub between mocks';		assert: agent + 58 = 58 description: 'second mock';		assert: agent + 45 = 145 description: 'stub after mocks'.	self shouldnt: [agent _verify] raise: BurnNotice</body><body package="DoubleAgents-Tests">allowsStubsBetweenOrderedMocks	&lt;test&gt;	| agent |	agent := (Target doubleAgent)				ordered;				expect: #+ with: 42;				stub: #unaryMessage return: 142;				expect: #+ with: 58;				yourself.	agent unaryMessage.	agent + 42.	agent unaryMessage.	agent + 58.	agent unaryMessage.	self shouldnt: [agent _verify] raise: BurnNotice</body><body package="DoubleAgents-Tests">canMockAndStubDifferentMethodsOfSameAgent	&lt;test&gt;	| agent |	agent := (Target doubleAgent)				stub: #unaryMessage return: 42;				expect: #+					with: 42					do: [:arg | 100 + arg];				yourself.	self assert: agent + agent unaryMessage = 142.	self shouldnt: [agent _verify] raise: BurnNotice</body><body package="DoubleAgents-Tests">fallsBackToStubAfterExpectationsMet	&lt;test&gt;	| agent |	agent := (Target doubleAgent)				stub: #unaryMessage return: 42;				expect: #unaryMessage return: 58;				yourself.	agent unaryMessage.	self assert: agent unaryMessage = 42</body><body package="DoubleAgents-Tests">overridesStubWithMock	&lt;test&gt;	| agent |	agent := (Target doubleAgent)				stub: #unaryMessage return: 42;				expect: #unaryMessage return: 58;				yourself.	self assert: agent unaryMessage = 58</body><body package="DoubleAgents-Tests">replacesMockWithStub	&lt;test&gt;	| agent |	agent := (Target doubleAgent)				expect: #unaryMessage return: 58;				stub: #unaryMessage return: 42;				yourself.	self assert: agent unaryMessage = 42</body></methods><methods><class-id>DoubleAgents.FlexibleMockTest</class-id> <category>tests</category><body package="DoubleAgents-Tests">allowsExtraSendsOfMockedMessages	&lt;test&gt;	agent unaryMessage.	self shouldnt: 			[agent				unaryMessage;				_verify]		raise: BurnNotice</body><body package="DoubleAgents-Tests">allowsSendsWithUnexpectedArguments	&lt;test&gt;	agent := (Target doubleAgent)				flexible;				expect: #+ with: 42;				yourself.	self shouldnt: [agent + #not42] raise: BurnNotice</body><body package="DoubleAgents-Tests">allowsUnexpectedMessagesBetweenOrderedMocks	&lt;test&gt;	agent := (Target doubleAgent)				ordered;				flexible;				expect: #+ with: 42;				expect: #+ with: 58;				yourself.	agent unaryMessage.	agent + 42.	agent unaryMessage.	agent + 58.	agent unaryMessage.	self shouldnt: [agent _verify] raise: BurnNotice</body><body package="DoubleAgents-Tests">callsMockedMethod	&lt;test&gt;	self assert: agent unaryMessage = 42.	agent _verify</body><body package="DoubleAgents-Tests">doesntRespondToUnknownMessages	&lt;test&gt;	self deny: (agent respondsTo: #unknownMessage)</body><body package="DoubleAgents-Tests">doesntUnderstandUnknownMessages	&lt;test&gt;	self should: [agent unknownMessage] raise: MessageNotUnderstood</body><body package="DoubleAgents-Tests">requiresAllExpectationsToBeMet	&lt;test&gt;	agent := (Target doubleAgent)				flexible;				expect: #+ with: 42;				yourself.	agent + #not42.	self should: [agent _verify] raise: BurnNotice</body><body package="DoubleAgents-Tests">respondsToKnownButUnmockedMessages	&lt;test&gt;	self assert: (agent respondsTo: #keyword:message:)</body><body package="DoubleAgents-Tests">returnsSelfFromKnownButUnmockedMessages	&lt;test&gt;	self assert: (agent keyword: #arg message: 42) == agent</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>